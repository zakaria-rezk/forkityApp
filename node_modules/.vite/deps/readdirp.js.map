{
  "version": 3,
  "sources": ["browser-external:fs", "browser-external:stream", "browser-external:path", "browser-external:util", "../../picomatch/lib/constants.js", "../../picomatch/lib/utils.js", "../../picomatch/lib/scan.js", "../../picomatch/lib/parse.js", "../../picomatch/lib/picomatch.js", "../../picomatch/index.js", "../../readdirp/index.js"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"stream\" has been externalized for browser compatibility. Cannot access \"stream.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"path\" has been externalized for browser compatibility. Cannot access \"path.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"util\" has been externalized for browser compatibility. Cannot access \"util.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "'use strict';\r\n\r\nconst path = require('path');\r\nconst WIN_SLASH = '\\\\\\\\/';\r\nconst WIN_NO_SLASH = `[^${WIN_SLASH}]`;\r\n\r\n/**\r\n * Posix glob regex\r\n */\r\n\r\nconst DOT_LITERAL = '\\\\.';\r\nconst PLUS_LITERAL = '\\\\+';\r\nconst QMARK_LITERAL = '\\\\?';\r\nconst SLASH_LITERAL = '\\\\/';\r\nconst ONE_CHAR = '(?=.)';\r\nconst QMARK = '[^/]';\r\nconst END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;\r\nconst START_ANCHOR = `(?:^|${SLASH_LITERAL})`;\r\nconst DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;\r\nconst NO_DOT = `(?!${DOT_LITERAL})`;\r\nconst NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;\r\nconst NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;\r\nconst NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;\r\nconst QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;\r\nconst STAR = `${QMARK}*?`;\r\n\r\nconst POSIX_CHARS = {\r\n  DOT_LITERAL,\r\n  PLUS_LITERAL,\r\n  QMARK_LITERAL,\r\n  SLASH_LITERAL,\r\n  ONE_CHAR,\r\n  QMARK,\r\n  END_ANCHOR,\r\n  DOTS_SLASH,\r\n  NO_DOT,\r\n  NO_DOTS,\r\n  NO_DOT_SLASH,\r\n  NO_DOTS_SLASH,\r\n  QMARK_NO_DOT,\r\n  STAR,\r\n  START_ANCHOR\r\n};\r\n\r\n/**\r\n * Windows glob regex\r\n */\r\n\r\nconst WINDOWS_CHARS = {\r\n  ...POSIX_CHARS,\r\n\r\n  SLASH_LITERAL: `[${WIN_SLASH}]`,\r\n  QMARK: WIN_NO_SLASH,\r\n  STAR: `${WIN_NO_SLASH}*?`,\r\n  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,\r\n  NO_DOT: `(?!${DOT_LITERAL})`,\r\n  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,\r\n  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,\r\n  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,\r\n  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,\r\n  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,\r\n  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`\r\n};\r\n\r\n/**\r\n * POSIX Bracket Regex\r\n */\r\n\r\nconst POSIX_REGEX_SOURCE = {\r\n  alnum: 'a-zA-Z0-9',\r\n  alpha: 'a-zA-Z',\r\n  ascii: '\\\\x00-\\\\x7F',\r\n  blank: ' \\\\t',\r\n  cntrl: '\\\\x00-\\\\x1F\\\\x7F',\r\n  digit: '0-9',\r\n  graph: '\\\\x21-\\\\x7E',\r\n  lower: 'a-z',\r\n  print: '\\\\x20-\\\\x7E ',\r\n  punct: '\\\\-!\"#$%&\\'()\\\\*+,./:;<=>?@[\\\\]^_`{|}~',\r\n  space: ' \\\\t\\\\r\\\\n\\\\v\\\\f',\r\n  upper: 'A-Z',\r\n  word: 'A-Za-z0-9_',\r\n  xdigit: 'A-Fa-f0-9'\r\n};\r\n\r\nmodule.exports = {\r\n  MAX_LENGTH: 1024 * 64,\r\n  POSIX_REGEX_SOURCE,\r\n\r\n  // regular expressions\r\n  REGEX_BACKSLASH: /\\\\(?![*+?^${}(|)[\\]])/g,\r\n  REGEX_NON_SPECIAL_CHARS: /^[^@![\\].,$*+?^{}()|\\\\/]+/,\r\n  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\\]]/,\r\n  REGEX_SPECIAL_CHARS_BACKREF: /(\\\\?)((\\W)(\\3*))/g,\r\n  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\\]])/g,\r\n  REGEX_REMOVE_BACKSLASH: /(?:\\[.*?[^\\\\]\\]|\\\\(?=.))/g,\r\n\r\n  // Replace globs with equivalent patterns to reduce parsing time.\r\n  REPLACEMENTS: {\r\n    '***': '*',\r\n    '**/**': '**',\r\n    '**/**/**': '**'\r\n  },\r\n\r\n  // Digits\r\n  CHAR_0: 48, /* 0 */\r\n  CHAR_9: 57, /* 9 */\r\n\r\n  // Alphabet chars.\r\n  CHAR_UPPERCASE_A: 65, /* A */\r\n  CHAR_LOWERCASE_A: 97, /* a */\r\n  CHAR_UPPERCASE_Z: 90, /* Z */\r\n  CHAR_LOWERCASE_Z: 122, /* z */\r\n\r\n  CHAR_LEFT_PARENTHESES: 40, /* ( */\r\n  CHAR_RIGHT_PARENTHESES: 41, /* ) */\r\n\r\n  CHAR_ASTERISK: 42, /* * */\r\n\r\n  // Non-alphabetic chars.\r\n  CHAR_AMPERSAND: 38, /* & */\r\n  CHAR_AT: 64, /* @ */\r\n  CHAR_BACKWARD_SLASH: 92, /* \\ */\r\n  CHAR_CARRIAGE_RETURN: 13, /* \\r */\r\n  CHAR_CIRCUMFLEX_ACCENT: 94, /* ^ */\r\n  CHAR_COLON: 58, /* : */\r\n  CHAR_COMMA: 44, /* , */\r\n  CHAR_DOT: 46, /* . */\r\n  CHAR_DOUBLE_QUOTE: 34, /* \" */\r\n  CHAR_EQUAL: 61, /* = */\r\n  CHAR_EXCLAMATION_MARK: 33, /* ! */\r\n  CHAR_FORM_FEED: 12, /* \\f */\r\n  CHAR_FORWARD_SLASH: 47, /* / */\r\n  CHAR_GRAVE_ACCENT: 96, /* ` */\r\n  CHAR_HASH: 35, /* # */\r\n  CHAR_HYPHEN_MINUS: 45, /* - */\r\n  CHAR_LEFT_ANGLE_BRACKET: 60, /* < */\r\n  CHAR_LEFT_CURLY_BRACE: 123, /* { */\r\n  CHAR_LEFT_SQUARE_BRACKET: 91, /* [ */\r\n  CHAR_LINE_FEED: 10, /* \\n */\r\n  CHAR_NO_BREAK_SPACE: 160, /* \\u00A0 */\r\n  CHAR_PERCENT: 37, /* % */\r\n  CHAR_PLUS: 43, /* + */\r\n  CHAR_QUESTION_MARK: 63, /* ? */\r\n  CHAR_RIGHT_ANGLE_BRACKET: 62, /* > */\r\n  CHAR_RIGHT_CURLY_BRACE: 125, /* } */\r\n  CHAR_RIGHT_SQUARE_BRACKET: 93, /* ] */\r\n  CHAR_SEMICOLON: 59, /* ; */\r\n  CHAR_SINGLE_QUOTE: 39, /* ' */\r\n  CHAR_SPACE: 32, /*   */\r\n  CHAR_TAB: 9, /* \\t */\r\n  CHAR_UNDERSCORE: 95, /* _ */\r\n  CHAR_VERTICAL_LINE: 124, /* | */\r\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279, /* \\uFEFF */\r\n\r\n  SEP: path.sep,\r\n\r\n  /**\r\n   * Create EXTGLOB_CHARS\r\n   */\r\n\r\n  extglobChars(chars) {\r\n    return {\r\n      '!': { type: 'negate', open: '(?:(?!(?:', close: `))${chars.STAR})` },\r\n      '?': { type: 'qmark', open: '(?:', close: ')?' },\r\n      '+': { type: 'plus', open: '(?:', close: ')+' },\r\n      '*': { type: 'star', open: '(?:', close: ')*' },\r\n      '@': { type: 'at', open: '(?:', close: ')' }\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Create GLOB_CHARS\r\n   */\r\n\r\n  globChars(win32) {\r\n    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;\r\n  }\r\n};\r\n", "'use strict';\r\n\r\nconst path = require('path');\r\nconst win32 = process.platform === 'win32';\r\nconst {\r\n  REGEX_BACKSLASH,\r\n  REGEX_REMOVE_BACKSLASH,\r\n  REGEX_SPECIAL_CHARS,\r\n  REGEX_SPECIAL_CHARS_GLOBAL\r\n} = require('./constants');\r\n\r\nexports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);\r\nexports.hasRegexChars = str => REGEX_SPECIAL_CHARS.test(str);\r\nexports.isRegexChar = str => str.length === 1 && exports.hasRegexChars(str);\r\nexports.escapeRegex = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\\\$1');\r\nexports.toPosixSlashes = str => str.replace(REGEX_BACKSLASH, '/');\r\n\r\nexports.removeBackslashes = str => {\r\n  return str.replace(REGEX_REMOVE_BACKSLASH, match => {\r\n    return match === '\\\\' ? '' : match;\r\n  });\r\n};\r\n\r\nexports.supportsLookbehinds = () => {\r\n  const segs = process.version.slice(1).split('.').map(Number);\r\n  if (segs.length === 3 && segs[0] >= 9 || (segs[0] === 8 && segs[1] >= 10)) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexports.isWindows = options => {\r\n  if (options && typeof options.windows === 'boolean') {\r\n    return options.windows;\r\n  }\r\n  return win32 === true || path.sep === '\\\\';\r\n};\r\n\r\nexports.escapeLast = (input, char, lastIdx) => {\r\n  const idx = input.lastIndexOf(char, lastIdx);\r\n  if (idx === -1) return input;\r\n  if (input[idx - 1] === '\\\\') return exports.escapeLast(input, char, idx - 1);\r\n  return `${input.slice(0, idx)}\\\\${input.slice(idx)}`;\r\n};\r\n\r\nexports.removePrefix = (input, state = {}) => {\r\n  let output = input;\r\n  if (output.startsWith('./')) {\r\n    output = output.slice(2);\r\n    state.prefix = './';\r\n  }\r\n  return output;\r\n};\r\n\r\nexports.wrapOutput = (input, state = {}, options = {}) => {\r\n  const prepend = options.contains ? '' : '^';\r\n  const append = options.contains ? '' : '$';\r\n\r\n  let output = `${prepend}(?:${input})${append}`;\r\n  if (state.negated === true) {\r\n    output = `(?:^(?!${output}).*$)`;\r\n  }\r\n  return output;\r\n};\r\n", "'use strict';\r\n\r\nconst utils = require('./utils');\r\nconst {\r\n  CHAR_ASTERISK,             /* * */\r\n  CHAR_AT,                   /* @ */\r\n  CHAR_BACKWARD_SLASH,       /* \\ */\r\n  CHAR_COMMA,                /* , */\r\n  CHAR_DOT,                  /* . */\r\n  CHAR_EXCLAMATION_MARK,     /* ! */\r\n  CHAR_FORWARD_SLASH,        /* / */\r\n  CHAR_LEFT_CURLY_BRACE,     /* { */\r\n  CHAR_LEFT_PARENTHESES,     /* ( */\r\n  CHAR_LEFT_SQUARE_BRACKET,  /* [ */\r\n  CHAR_PLUS,                 /* + */\r\n  CHAR_QUESTION_MARK,        /* ? */\r\n  CHAR_RIGHT_CURLY_BRACE,    /* } */\r\n  CHAR_RIGHT_PARENTHESES,    /* ) */\r\n  CHAR_RIGHT_SQUARE_BRACKET  /* ] */\r\n} = require('./constants');\r\n\r\nconst isPathSeparator = code => {\r\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\r\n};\r\n\r\nconst depth = token => {\r\n  if (token.isPrefix !== true) {\r\n    token.depth = token.isGlobstar ? Infinity : 1;\r\n  }\r\n};\r\n\r\n/**\r\n * Quickly scans a glob pattern and returns an object with a handful of\r\n * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),\r\n * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not\r\n * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).\r\n *\r\n * ```js\r\n * const pm = require('picomatch');\r\n * console.log(pm.scan('foo/bar/*.js'));\r\n * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }\r\n * ```\r\n * @param {String} `str`\r\n * @param {Object} `options`\r\n * @return {Object} Returns an object with tokens and regex source string.\r\n * @api public\r\n */\r\n\r\nconst scan = (input, options) => {\r\n  const opts = options || {};\r\n\r\n  const length = input.length - 1;\r\n  const scanToEnd = opts.parts === true || opts.scanToEnd === true;\r\n  const slashes = [];\r\n  const tokens = [];\r\n  const parts = [];\r\n\r\n  let str = input;\r\n  let index = -1;\r\n  let start = 0;\r\n  let lastIndex = 0;\r\n  let isBrace = false;\r\n  let isBracket = false;\r\n  let isGlob = false;\r\n  let isExtglob = false;\r\n  let isGlobstar = false;\r\n  let braceEscaped = false;\r\n  let backslashes = false;\r\n  let negated = false;\r\n  let negatedExtglob = false;\r\n  let finished = false;\r\n  let braces = 0;\r\n  let prev;\r\n  let code;\r\n  let token = { value: '', depth: 0, isGlob: false };\r\n\r\n  const eos = () => index >= length;\r\n  const peek = () => str.charCodeAt(index + 1);\r\n  const advance = () => {\r\n    prev = code;\r\n    return str.charCodeAt(++index);\r\n  };\r\n\r\n  while (index < length) {\r\n    code = advance();\r\n    let next;\r\n\r\n    if (code === CHAR_BACKWARD_SLASH) {\r\n      backslashes = token.backslashes = true;\r\n      code = advance();\r\n\r\n      if (code === CHAR_LEFT_CURLY_BRACE) {\r\n        braceEscaped = true;\r\n      }\r\n      continue;\r\n    }\r\n\r\n    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {\r\n      braces++;\r\n\r\n      while (eos() !== true && (code = advance())) {\r\n        if (code === CHAR_BACKWARD_SLASH) {\r\n          backslashes = token.backslashes = true;\r\n          advance();\r\n          continue;\r\n        }\r\n\r\n        if (code === CHAR_LEFT_CURLY_BRACE) {\r\n          braces++;\r\n          continue;\r\n        }\r\n\r\n        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {\r\n          isBrace = token.isBrace = true;\r\n          isGlob = token.isGlob = true;\r\n          finished = true;\r\n\r\n          if (scanToEnd === true) {\r\n            continue;\r\n          }\r\n\r\n          break;\r\n        }\r\n\r\n        if (braceEscaped !== true && code === CHAR_COMMA) {\r\n          isBrace = token.isBrace = true;\r\n          isGlob = token.isGlob = true;\r\n          finished = true;\r\n\r\n          if (scanToEnd === true) {\r\n            continue;\r\n          }\r\n\r\n          break;\r\n        }\r\n\r\n        if (code === CHAR_RIGHT_CURLY_BRACE) {\r\n          braces--;\r\n\r\n          if (braces === 0) {\r\n            braceEscaped = false;\r\n            isBrace = token.isBrace = true;\r\n            finished = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (scanToEnd === true) {\r\n        continue;\r\n      }\r\n\r\n      break;\r\n    }\r\n\r\n    if (code === CHAR_FORWARD_SLASH) {\r\n      slashes.push(index);\r\n      tokens.push(token);\r\n      token = { value: '', depth: 0, isGlob: false };\r\n\r\n      if (finished === true) continue;\r\n      if (prev === CHAR_DOT && index === (start + 1)) {\r\n        start += 2;\r\n        continue;\r\n      }\r\n\r\n      lastIndex = index + 1;\r\n      continue;\r\n    }\r\n\r\n    if (opts.noext !== true) {\r\n      const isExtglobChar = code === CHAR_PLUS\r\n        || code === CHAR_AT\r\n        || code === CHAR_ASTERISK\r\n        || code === CHAR_QUESTION_MARK\r\n        || code === CHAR_EXCLAMATION_MARK;\r\n\r\n      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {\r\n        isGlob = token.isGlob = true;\r\n        isExtglob = token.isExtglob = true;\r\n        finished = true;\r\n        if (code === CHAR_EXCLAMATION_MARK && index === start) {\r\n          negatedExtglob = true;\r\n        }\r\n\r\n        if (scanToEnd === true) {\r\n          while (eos() !== true && (code = advance())) {\r\n            if (code === CHAR_BACKWARD_SLASH) {\r\n              backslashes = token.backslashes = true;\r\n              code = advance();\r\n              continue;\r\n            }\r\n\r\n            if (code === CHAR_RIGHT_PARENTHESES) {\r\n              isGlob = token.isGlob = true;\r\n              finished = true;\r\n              break;\r\n            }\r\n          }\r\n          continue;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (code === CHAR_ASTERISK) {\r\n      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;\r\n      isGlob = token.isGlob = true;\r\n      finished = true;\r\n\r\n      if (scanToEnd === true) {\r\n        continue;\r\n      }\r\n      break;\r\n    }\r\n\r\n    if (code === CHAR_QUESTION_MARK) {\r\n      isGlob = token.isGlob = true;\r\n      finished = true;\r\n\r\n      if (scanToEnd === true) {\r\n        continue;\r\n      }\r\n      break;\r\n    }\r\n\r\n    if (code === CHAR_LEFT_SQUARE_BRACKET) {\r\n      while (eos() !== true && (next = advance())) {\r\n        if (next === CHAR_BACKWARD_SLASH) {\r\n          backslashes = token.backslashes = true;\r\n          advance();\r\n          continue;\r\n        }\r\n\r\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\r\n          isBracket = token.isBracket = true;\r\n          isGlob = token.isGlob = true;\r\n          finished = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (scanToEnd === true) {\r\n        continue;\r\n      }\r\n\r\n      break;\r\n    }\r\n\r\n    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {\r\n      negated = token.negated = true;\r\n      start++;\r\n      continue;\r\n    }\r\n\r\n    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {\r\n      isGlob = token.isGlob = true;\r\n\r\n      if (scanToEnd === true) {\r\n        while (eos() !== true && (code = advance())) {\r\n          if (code === CHAR_LEFT_PARENTHESES) {\r\n            backslashes = token.backslashes = true;\r\n            code = advance();\r\n            continue;\r\n          }\r\n\r\n          if (code === CHAR_RIGHT_PARENTHESES) {\r\n            finished = true;\r\n            break;\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n      break;\r\n    }\r\n\r\n    if (isGlob === true) {\r\n      finished = true;\r\n\r\n      if (scanToEnd === true) {\r\n        continue;\r\n      }\r\n\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (opts.noext === true) {\r\n    isExtglob = false;\r\n    isGlob = false;\r\n  }\r\n\r\n  let base = str;\r\n  let prefix = '';\r\n  let glob = '';\r\n\r\n  if (start > 0) {\r\n    prefix = str.slice(0, start);\r\n    str = str.slice(start);\r\n    lastIndex -= start;\r\n  }\r\n\r\n  if (base && isGlob === true && lastIndex > 0) {\r\n    base = str.slice(0, lastIndex);\r\n    glob = str.slice(lastIndex);\r\n  } else if (isGlob === true) {\r\n    base = '';\r\n    glob = str;\r\n  } else {\r\n    base = str;\r\n  }\r\n\r\n  if (base && base !== '' && base !== '/' && base !== str) {\r\n    if (isPathSeparator(base.charCodeAt(base.length - 1))) {\r\n      base = base.slice(0, -1);\r\n    }\r\n  }\r\n\r\n  if (opts.unescape === true) {\r\n    if (glob) glob = utils.removeBackslashes(glob);\r\n\r\n    if (base && backslashes === true) {\r\n      base = utils.removeBackslashes(base);\r\n    }\r\n  }\r\n\r\n  const state = {\r\n    prefix,\r\n    input,\r\n    start,\r\n    base,\r\n    glob,\r\n    isBrace,\r\n    isBracket,\r\n    isGlob,\r\n    isExtglob,\r\n    isGlobstar,\r\n    negated,\r\n    negatedExtglob\r\n  };\r\n\r\n  if (opts.tokens === true) {\r\n    state.maxDepth = 0;\r\n    if (!isPathSeparator(code)) {\r\n      tokens.push(token);\r\n    }\r\n    state.tokens = tokens;\r\n  }\r\n\r\n  if (opts.parts === true || opts.tokens === true) {\r\n    let prevIndex;\r\n\r\n    for (let idx = 0; idx < slashes.length; idx++) {\r\n      const n = prevIndex ? prevIndex + 1 : start;\r\n      const i = slashes[idx];\r\n      const value = input.slice(n, i);\r\n      if (opts.tokens) {\r\n        if (idx === 0 && start !== 0) {\r\n          tokens[idx].isPrefix = true;\r\n          tokens[idx].value = prefix;\r\n        } else {\r\n          tokens[idx].value = value;\r\n        }\r\n        depth(tokens[idx]);\r\n        state.maxDepth += tokens[idx].depth;\r\n      }\r\n      if (idx !== 0 || value !== '') {\r\n        parts.push(value);\r\n      }\r\n      prevIndex = i;\r\n    }\r\n\r\n    if (prevIndex && prevIndex + 1 < input.length) {\r\n      const value = input.slice(prevIndex + 1);\r\n      parts.push(value);\r\n\r\n      if (opts.tokens) {\r\n        tokens[tokens.length - 1].value = value;\r\n        depth(tokens[tokens.length - 1]);\r\n        state.maxDepth += tokens[tokens.length - 1].depth;\r\n      }\r\n    }\r\n\r\n    state.slashes = slashes;\r\n    state.parts = parts;\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nmodule.exports = scan;\r\n", "'use strict';\r\n\r\nconst constants = require('./constants');\r\nconst utils = require('./utils');\r\n\r\n/**\r\n * Constants\r\n */\r\n\r\nconst {\r\n  MAX_LENGTH,\r\n  POSIX_REGEX_SOURCE,\r\n  REGEX_NON_SPECIAL_CHARS,\r\n  REGEX_SPECIAL_CHARS_BACKREF,\r\n  REPLACEMENTS\r\n} = constants;\r\n\r\n/**\r\n * Helpers\r\n */\r\n\r\nconst expandRange = (args, options) => {\r\n  if (typeof options.expandRange === 'function') {\r\n    return options.expandRange(...args, options);\r\n  }\r\n\r\n  args.sort();\r\n  const value = `[${args.join('-')}]`;\r\n\r\n  try {\r\n    /* eslint-disable-next-line no-new */\r\n    new RegExp(value);\r\n  } catch (ex) {\r\n    return args.map(v => utils.escapeRegex(v)).join('..');\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\n/**\r\n * Create the message for a syntax error\r\n */\r\n\r\nconst syntaxError = (type, char) => {\r\n  return `Missing ${type}: \"${char}\" - use \"\\\\\\\\${char}\" to match literal characters`;\r\n};\r\n\r\n/**\r\n * Parse the given input string.\r\n * @param {String} input\r\n * @param {Object} options\r\n * @return {Object}\r\n */\r\n\r\nconst parse = (input, options) => {\r\n  if (typeof input !== 'string') {\r\n    throw new TypeError('Expected a string');\r\n  }\r\n\r\n  input = REPLACEMENTS[input] || input;\r\n\r\n  const opts = { ...options };\r\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\r\n\r\n  let len = input.length;\r\n  if (len > max) {\r\n    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);\r\n  }\r\n\r\n  const bos = { type: 'bos', value: '', output: opts.prepend || '' };\r\n  const tokens = [bos];\r\n\r\n  const capture = opts.capture ? '' : '?:';\r\n  const win32 = utils.isWindows(options);\r\n\r\n  // create constants based on platform, for windows or posix\r\n  const PLATFORM_CHARS = constants.globChars(win32);\r\n  const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);\r\n\r\n  const {\r\n    DOT_LITERAL,\r\n    PLUS_LITERAL,\r\n    SLASH_LITERAL,\r\n    ONE_CHAR,\r\n    DOTS_SLASH,\r\n    NO_DOT,\r\n    NO_DOT_SLASH,\r\n    NO_DOTS_SLASH,\r\n    QMARK,\r\n    QMARK_NO_DOT,\r\n    STAR,\r\n    START_ANCHOR\r\n  } = PLATFORM_CHARS;\r\n\r\n  const globstar = opts => {\r\n    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;\r\n  };\r\n\r\n  const nodot = opts.dot ? '' : NO_DOT;\r\n  const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;\r\n  let star = opts.bash === true ? globstar(opts) : STAR;\r\n\r\n  if (opts.capture) {\r\n    star = `(${star})`;\r\n  }\r\n\r\n  // minimatch options support\r\n  if (typeof opts.noext === 'boolean') {\r\n    opts.noextglob = opts.noext;\r\n  }\r\n\r\n  const state = {\r\n    input,\r\n    index: -1,\r\n    start: 0,\r\n    dot: opts.dot === true,\r\n    consumed: '',\r\n    output: '',\r\n    prefix: '',\r\n    backtrack: false,\r\n    negated: false,\r\n    brackets: 0,\r\n    braces: 0,\r\n    parens: 0,\r\n    quotes: 0,\r\n    globstar: false,\r\n    tokens\r\n  };\r\n\r\n  input = utils.removePrefix(input, state);\r\n  len = input.length;\r\n\r\n  const extglobs = [];\r\n  const braces = [];\r\n  const stack = [];\r\n  let prev = bos;\r\n  let value;\r\n\r\n  /**\r\n   * Tokenizing helpers\r\n   */\r\n\r\n  const eos = () => state.index === len - 1;\r\n  const peek = state.peek = (n = 1) => input[state.index + n];\r\n  const advance = state.advance = () => input[++state.index] || '';\r\n  const remaining = () => input.slice(state.index + 1);\r\n  const consume = (value = '', num = 0) => {\r\n    state.consumed += value;\r\n    state.index += num;\r\n  };\r\n\r\n  const append = token => {\r\n    state.output += token.output != null ? token.output : token.value;\r\n    consume(token.value);\r\n  };\r\n\r\n  const negate = () => {\r\n    let count = 1;\r\n\r\n    while (peek() === '!' && (peek(2) !== '(' || peek(3) === '?')) {\r\n      advance();\r\n      state.start++;\r\n      count++;\r\n    }\r\n\r\n    if (count % 2 === 0) {\r\n      return false;\r\n    }\r\n\r\n    state.negated = true;\r\n    state.start++;\r\n    return true;\r\n  };\r\n\r\n  const increment = type => {\r\n    state[type]++;\r\n    stack.push(type);\r\n  };\r\n\r\n  const decrement = type => {\r\n    state[type]--;\r\n    stack.pop();\r\n  };\r\n\r\n  /**\r\n   * Push tokens onto the tokens array. This helper speeds up\r\n   * tokenizing by 1) helping us avoid backtracking as much as possible,\r\n   * and 2) helping us avoid creating extra tokens when consecutive\r\n   * characters are plain text. This improves performance and simplifies\r\n   * lookbehinds.\r\n   */\r\n\r\n  const push = tok => {\r\n    if (prev.type === 'globstar') {\r\n      const isBrace = state.braces > 0 && (tok.type === 'comma' || tok.type === 'brace');\r\n      const isExtglob = tok.extglob === true || (extglobs.length && (tok.type === 'pipe' || tok.type === 'paren'));\r\n\r\n      if (tok.type !== 'slash' && tok.type !== 'paren' && !isBrace && !isExtglob) {\r\n        state.output = state.output.slice(0, -prev.output.length);\r\n        prev.type = 'star';\r\n        prev.value = '*';\r\n        prev.output = star;\r\n        state.output += prev.output;\r\n      }\r\n    }\r\n\r\n    if (extglobs.length && tok.type !== 'paren') {\r\n      extglobs[extglobs.length - 1].inner += tok.value;\r\n    }\r\n\r\n    if (tok.value || tok.output) append(tok);\r\n    if (prev && prev.type === 'text' && tok.type === 'text') {\r\n      prev.value += tok.value;\r\n      prev.output = (prev.output || '') + tok.value;\r\n      return;\r\n    }\r\n\r\n    tok.prev = prev;\r\n    tokens.push(tok);\r\n    prev = tok;\r\n  };\r\n\r\n  const extglobOpen = (type, value) => {\r\n    const token = { ...EXTGLOB_CHARS[value], conditions: 1, inner: '' };\r\n\r\n    token.prev = prev;\r\n    token.parens = state.parens;\r\n    token.output = state.output;\r\n    const output = (opts.capture ? '(' : '') + token.open;\r\n\r\n    increment('parens');\r\n    push({ type, value, output: state.output ? '' : ONE_CHAR });\r\n    push({ type: 'paren', extglob: true, value: advance(), output });\r\n    extglobs.push(token);\r\n  };\r\n\r\n  const extglobClose = token => {\r\n    let output = token.close + (opts.capture ? ')' : '');\r\n    let rest;\r\n\r\n    if (token.type === 'negate') {\r\n      let extglobStar = star;\r\n\r\n      if (token.inner && token.inner.length > 1 && token.inner.includes('/')) {\r\n        extglobStar = globstar(opts);\r\n      }\r\n\r\n      if (extglobStar !== star || eos() || /^\\)+$/.test(remaining())) {\r\n        output = token.close = `)$))${extglobStar}`;\r\n      }\r\n\r\n      if (token.inner.includes('*') && (rest = remaining()) && /^\\.[^\\\\/.]+$/.test(rest)) {\r\n        // Any non-magical string (`.ts`) or even nested expression (`.{ts,tsx}`) can follow after the closing parenthesis.\r\n        // In this case, we need to parse the string and use it in the output of the original pattern.\r\n        // Suitable patterns: `/!(*.d).ts`, `/!(*.d).{ts,tsx}`, `**/!(*-dbg).@(js)`.\r\n        //\r\n        // Disabling the `fastpaths` option due to a problem with parsing strings as `.ts` in the pattern like `**/!(*.d).ts`.\r\n        const expression = parse(rest, { ...options, fastpaths: false }).output;\r\n\r\n        output = token.close = `)${expression})${extglobStar})`;\r\n      }\r\n\r\n      if (token.prev.type === 'bos') {\r\n        state.negatedExtglob = true;\r\n      }\r\n    }\r\n\r\n    push({ type: 'paren', extglob: true, value, output });\r\n    decrement('parens');\r\n  };\r\n\r\n  /**\r\n   * Fast paths\r\n   */\r\n\r\n  if (opts.fastpaths !== false && !/(^[*!]|[/()[\\]{}\"])/.test(input)) {\r\n    let backslashes = false;\r\n\r\n    let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {\r\n      if (first === '\\\\') {\r\n        backslashes = true;\r\n        return m;\r\n      }\r\n\r\n      if (first === '?') {\r\n        if (esc) {\r\n          return esc + first + (rest ? QMARK.repeat(rest.length) : '');\r\n        }\r\n        if (index === 0) {\r\n          return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : '');\r\n        }\r\n        return QMARK.repeat(chars.length);\r\n      }\r\n\r\n      if (first === '.') {\r\n        return DOT_LITERAL.repeat(chars.length);\r\n      }\r\n\r\n      if (first === '*') {\r\n        if (esc) {\r\n          return esc + first + (rest ? star : '');\r\n        }\r\n        return star;\r\n      }\r\n      return esc ? m : `\\\\${m}`;\r\n    });\r\n\r\n    if (backslashes === true) {\r\n      if (opts.unescape === true) {\r\n        output = output.replace(/\\\\/g, '');\r\n      } else {\r\n        output = output.replace(/\\\\+/g, m => {\r\n          return m.length % 2 === 0 ? '\\\\\\\\' : (m ? '\\\\' : '');\r\n        });\r\n      }\r\n    }\r\n\r\n    if (output === input && opts.contains === true) {\r\n      state.output = input;\r\n      return state;\r\n    }\r\n\r\n    state.output = utils.wrapOutput(output, state, options);\r\n    return state;\r\n  }\r\n\r\n  /**\r\n   * Tokenize input until we reach end-of-string\r\n   */\r\n\r\n  while (!eos()) {\r\n    value = advance();\r\n\r\n    if (value === '\\u0000') {\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Escaped characters\r\n     */\r\n\r\n    if (value === '\\\\') {\r\n      const next = peek();\r\n\r\n      if (next === '/' && opts.bash !== true) {\r\n        continue;\r\n      }\r\n\r\n      if (next === '.' || next === ';') {\r\n        continue;\r\n      }\r\n\r\n      if (!next) {\r\n        value += '\\\\';\r\n        push({ type: 'text', value });\r\n        continue;\r\n      }\r\n\r\n      // collapse slashes to reduce potential for exploits\r\n      const match = /^\\\\+/.exec(remaining());\r\n      let slashes = 0;\r\n\r\n      if (match && match[0].length > 2) {\r\n        slashes = match[0].length;\r\n        state.index += slashes;\r\n        if (slashes % 2 !== 0) {\r\n          value += '\\\\';\r\n        }\r\n      }\r\n\r\n      if (opts.unescape === true) {\r\n        value = advance();\r\n      } else {\r\n        value += advance();\r\n      }\r\n\r\n      if (state.brackets === 0) {\r\n        push({ type: 'text', value });\r\n        continue;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * If we're inside a regex character class, continue\r\n     * until we reach the closing bracket.\r\n     */\r\n\r\n    if (state.brackets > 0 && (value !== ']' || prev.value === '[' || prev.value === '[^')) {\r\n      if (opts.posix !== false && value === ':') {\r\n        const inner = prev.value.slice(1);\r\n        if (inner.includes('[')) {\r\n          prev.posix = true;\r\n\r\n          if (inner.includes(':')) {\r\n            const idx = prev.value.lastIndexOf('[');\r\n            const pre = prev.value.slice(0, idx);\r\n            const rest = prev.value.slice(idx + 2);\r\n            const posix = POSIX_REGEX_SOURCE[rest];\r\n            if (posix) {\r\n              prev.value = pre + posix;\r\n              state.backtrack = true;\r\n              advance();\r\n\r\n              if (!bos.output && tokens.indexOf(prev) === 1) {\r\n                bos.output = ONE_CHAR;\r\n              }\r\n              continue;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if ((value === '[' && peek() !== ':') || (value === '-' && peek() === ']')) {\r\n        value = `\\\\${value}`;\r\n      }\r\n\r\n      if (value === ']' && (prev.value === '[' || prev.value === '[^')) {\r\n        value = `\\\\${value}`;\r\n      }\r\n\r\n      if (opts.posix === true && value === '!' && prev.value === '[') {\r\n        value = '^';\r\n      }\r\n\r\n      prev.value += value;\r\n      append({ value });\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * If we're inside a quoted string, continue\r\n     * until we reach the closing double quote.\r\n     */\r\n\r\n    if (state.quotes === 1 && value !== '\"') {\r\n      value = utils.escapeRegex(value);\r\n      prev.value += value;\r\n      append({ value });\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Double quotes\r\n     */\r\n\r\n    if (value === '\"') {\r\n      state.quotes = state.quotes === 1 ? 0 : 1;\r\n      if (opts.keepQuotes === true) {\r\n        push({ type: 'text', value });\r\n      }\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Parentheses\r\n     */\r\n\r\n    if (value === '(') {\r\n      increment('parens');\r\n      push({ type: 'paren', value });\r\n      continue;\r\n    }\r\n\r\n    if (value === ')') {\r\n      if (state.parens === 0 && opts.strictBrackets === true) {\r\n        throw new SyntaxError(syntaxError('opening', '('));\r\n      }\r\n\r\n      const extglob = extglobs[extglobs.length - 1];\r\n      if (extglob && state.parens === extglob.parens + 1) {\r\n        extglobClose(extglobs.pop());\r\n        continue;\r\n      }\r\n\r\n      push({ type: 'paren', value, output: state.parens ? ')' : '\\\\)' });\r\n      decrement('parens');\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Square brackets\r\n     */\r\n\r\n    if (value === '[') {\r\n      if (opts.nobracket === true || !remaining().includes(']')) {\r\n        if (opts.nobracket !== true && opts.strictBrackets === true) {\r\n          throw new SyntaxError(syntaxError('closing', ']'));\r\n        }\r\n\r\n        value = `\\\\${value}`;\r\n      } else {\r\n        increment('brackets');\r\n      }\r\n\r\n      push({ type: 'bracket', value });\r\n      continue;\r\n    }\r\n\r\n    if (value === ']') {\r\n      if (opts.nobracket === true || (prev && prev.type === 'bracket' && prev.value.length === 1)) {\r\n        push({ type: 'text', value, output: `\\\\${value}` });\r\n        continue;\r\n      }\r\n\r\n      if (state.brackets === 0) {\r\n        if (opts.strictBrackets === true) {\r\n          throw new SyntaxError(syntaxError('opening', '['));\r\n        }\r\n\r\n        push({ type: 'text', value, output: `\\\\${value}` });\r\n        continue;\r\n      }\r\n\r\n      decrement('brackets');\r\n\r\n      const prevValue = prev.value.slice(1);\r\n      if (prev.posix !== true && prevValue[0] === '^' && !prevValue.includes('/')) {\r\n        value = `/${value}`;\r\n      }\r\n\r\n      prev.value += value;\r\n      append({ value });\r\n\r\n      // when literal brackets are explicitly disabled\r\n      // assume we should match with a regex character class\r\n      if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {\r\n        continue;\r\n      }\r\n\r\n      const escaped = utils.escapeRegex(prev.value);\r\n      state.output = state.output.slice(0, -prev.value.length);\r\n\r\n      // when literal brackets are explicitly enabled\r\n      // assume we should escape the brackets to match literal characters\r\n      if (opts.literalBrackets === true) {\r\n        state.output += escaped;\r\n        prev.value = escaped;\r\n        continue;\r\n      }\r\n\r\n      // when the user specifies nothing, try to match both\r\n      prev.value = `(${capture}${escaped}|${prev.value})`;\r\n      state.output += prev.value;\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Braces\r\n     */\r\n\r\n    if (value === '{' && opts.nobrace !== true) {\r\n      increment('braces');\r\n\r\n      const open = {\r\n        type: 'brace',\r\n        value,\r\n        output: '(',\r\n        outputIndex: state.output.length,\r\n        tokensIndex: state.tokens.length\r\n      };\r\n\r\n      braces.push(open);\r\n      push(open);\r\n      continue;\r\n    }\r\n\r\n    if (value === '}') {\r\n      const brace = braces[braces.length - 1];\r\n\r\n      if (opts.nobrace === true || !brace) {\r\n        push({ type: 'text', value, output: value });\r\n        continue;\r\n      }\r\n\r\n      let output = ')';\r\n\r\n      if (brace.dots === true) {\r\n        const arr = tokens.slice();\r\n        const range = [];\r\n\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n          tokens.pop();\r\n          if (arr[i].type === 'brace') {\r\n            break;\r\n          }\r\n          if (arr[i].type !== 'dots') {\r\n            range.unshift(arr[i].value);\r\n          }\r\n        }\r\n\r\n        output = expandRange(range, opts);\r\n        state.backtrack = true;\r\n      }\r\n\r\n      if (brace.comma !== true && brace.dots !== true) {\r\n        const out = state.output.slice(0, brace.outputIndex);\r\n        const toks = state.tokens.slice(brace.tokensIndex);\r\n        brace.value = brace.output = '\\\\{';\r\n        value = output = '\\\\}';\r\n        state.output = out;\r\n        for (const t of toks) {\r\n          state.output += (t.output || t.value);\r\n        }\r\n      }\r\n\r\n      push({ type: 'brace', value, output });\r\n      decrement('braces');\r\n      braces.pop();\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Pipes\r\n     */\r\n\r\n    if (value === '|') {\r\n      if (extglobs.length > 0) {\r\n        extglobs[extglobs.length - 1].conditions++;\r\n      }\r\n      push({ type: 'text', value });\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Commas\r\n     */\r\n\r\n    if (value === ',') {\r\n      let output = value;\r\n\r\n      const brace = braces[braces.length - 1];\r\n      if (brace && stack[stack.length - 1] === 'braces') {\r\n        brace.comma = true;\r\n        output = '|';\r\n      }\r\n\r\n      push({ type: 'comma', value, output });\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Slashes\r\n     */\r\n\r\n    if (value === '/') {\r\n      // if the beginning of the glob is \"./\", advance the start\r\n      // to the current index, and don't add the \"./\" characters\r\n      // to the state. This greatly simplifies lookbehinds when\r\n      // checking for BOS characters like \"!\" and \".\" (not \"./\")\r\n      if (prev.type === 'dot' && state.index === state.start + 1) {\r\n        state.start = state.index + 1;\r\n        state.consumed = '';\r\n        state.output = '';\r\n        tokens.pop();\r\n        prev = bos; // reset \"prev\" to the first token\r\n        continue;\r\n      }\r\n\r\n      push({ type: 'slash', value, output: SLASH_LITERAL });\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Dots\r\n     */\r\n\r\n    if (value === '.') {\r\n      if (state.braces > 0 && prev.type === 'dot') {\r\n        if (prev.value === '.') prev.output = DOT_LITERAL;\r\n        const brace = braces[braces.length - 1];\r\n        prev.type = 'dots';\r\n        prev.output += value;\r\n        prev.value += value;\r\n        brace.dots = true;\r\n        continue;\r\n      }\r\n\r\n      if ((state.braces + state.parens) === 0 && prev.type !== 'bos' && prev.type !== 'slash') {\r\n        push({ type: 'text', value, output: DOT_LITERAL });\r\n        continue;\r\n      }\r\n\r\n      push({ type: 'dot', value, output: DOT_LITERAL });\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Question marks\r\n     */\r\n\r\n    if (value === '?') {\r\n      const isGroup = prev && prev.value === '(';\r\n      if (!isGroup && opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\r\n        extglobOpen('qmark', value);\r\n        continue;\r\n      }\r\n\r\n      if (prev && prev.type === 'paren') {\r\n        const next = peek();\r\n        let output = value;\r\n\r\n        if (next === '<' && !utils.supportsLookbehinds()) {\r\n          throw new Error('Node.js v10 or higher is required for regex lookbehinds');\r\n        }\r\n\r\n        if ((prev.value === '(' && !/[!=<:]/.test(next)) || (next === '<' && !/<([!=]|\\w+>)/.test(remaining()))) {\r\n          output = `\\\\${value}`;\r\n        }\r\n\r\n        push({ type: 'text', value, output });\r\n        continue;\r\n      }\r\n\r\n      if (opts.dot !== true && (prev.type === 'slash' || prev.type === 'bos')) {\r\n        push({ type: 'qmark', value, output: QMARK_NO_DOT });\r\n        continue;\r\n      }\r\n\r\n      push({ type: 'qmark', value, output: QMARK });\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Exclamation\r\n     */\r\n\r\n    if (value === '!') {\r\n      if (opts.noextglob !== true && peek() === '(') {\r\n        if (peek(2) !== '?' || !/[!=<:]/.test(peek(3))) {\r\n          extglobOpen('negate', value);\r\n          continue;\r\n        }\r\n      }\r\n\r\n      if (opts.nonegate !== true && state.index === 0) {\r\n        negate();\r\n        continue;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Plus\r\n     */\r\n\r\n    if (value === '+') {\r\n      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\r\n        extglobOpen('plus', value);\r\n        continue;\r\n      }\r\n\r\n      if ((prev && prev.value === '(') || opts.regex === false) {\r\n        push({ type: 'plus', value, output: PLUS_LITERAL });\r\n        continue;\r\n      }\r\n\r\n      if ((prev && (prev.type === 'bracket' || prev.type === 'paren' || prev.type === 'brace')) || state.parens > 0) {\r\n        push({ type: 'plus', value });\r\n        continue;\r\n      }\r\n\r\n      push({ type: 'plus', value: PLUS_LITERAL });\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Plain text\r\n     */\r\n\r\n    if (value === '@') {\r\n      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\r\n        push({ type: 'at', extglob: true, value, output: '' });\r\n        continue;\r\n      }\r\n\r\n      push({ type: 'text', value });\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Plain text\r\n     */\r\n\r\n    if (value !== '*') {\r\n      if (value === '$' || value === '^') {\r\n        value = `\\\\${value}`;\r\n      }\r\n\r\n      const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());\r\n      if (match) {\r\n        value += match[0];\r\n        state.index += match[0].length;\r\n      }\r\n\r\n      push({ type: 'text', value });\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Stars\r\n     */\r\n\r\n    if (prev && (prev.type === 'globstar' || prev.star === true)) {\r\n      prev.type = 'star';\r\n      prev.star = true;\r\n      prev.value += value;\r\n      prev.output = star;\r\n      state.backtrack = true;\r\n      state.globstar = true;\r\n      consume(value);\r\n      continue;\r\n    }\r\n\r\n    let rest = remaining();\r\n    if (opts.noextglob !== true && /^\\([^?]/.test(rest)) {\r\n      extglobOpen('star', value);\r\n      continue;\r\n    }\r\n\r\n    if (prev.type === 'star') {\r\n      if (opts.noglobstar === true) {\r\n        consume(value);\r\n        continue;\r\n      }\r\n\r\n      const prior = prev.prev;\r\n      const before = prior.prev;\r\n      const isStart = prior.type === 'slash' || prior.type === 'bos';\r\n      const afterStar = before && (before.type === 'star' || before.type === 'globstar');\r\n\r\n      if (opts.bash === true && (!isStart || (rest[0] && rest[0] !== '/'))) {\r\n        push({ type: 'star', value, output: '' });\r\n        continue;\r\n      }\r\n\r\n      const isBrace = state.braces > 0 && (prior.type === 'comma' || prior.type === 'brace');\r\n      const isExtglob = extglobs.length && (prior.type === 'pipe' || prior.type === 'paren');\r\n      if (!isStart && prior.type !== 'paren' && !isBrace && !isExtglob) {\r\n        push({ type: 'star', value, output: '' });\r\n        continue;\r\n      }\r\n\r\n      // strip consecutive `/**/`\r\n      while (rest.slice(0, 3) === '/**') {\r\n        const after = input[state.index + 4];\r\n        if (after && after !== '/') {\r\n          break;\r\n        }\r\n        rest = rest.slice(3);\r\n        consume('/**', 3);\r\n      }\r\n\r\n      if (prior.type === 'bos' && eos()) {\r\n        prev.type = 'globstar';\r\n        prev.value += value;\r\n        prev.output = globstar(opts);\r\n        state.output = prev.output;\r\n        state.globstar = true;\r\n        consume(value);\r\n        continue;\r\n      }\r\n\r\n      if (prior.type === 'slash' && prior.prev.type !== 'bos' && !afterStar && eos()) {\r\n        state.output = state.output.slice(0, -(prior.output + prev.output).length);\r\n        prior.output = `(?:${prior.output}`;\r\n\r\n        prev.type = 'globstar';\r\n        prev.output = globstar(opts) + (opts.strictSlashes ? ')' : '|$)');\r\n        prev.value += value;\r\n        state.globstar = true;\r\n        state.output += prior.output + prev.output;\r\n        consume(value);\r\n        continue;\r\n      }\r\n\r\n      if (prior.type === 'slash' && prior.prev.type !== 'bos' && rest[0] === '/') {\r\n        const end = rest[1] !== void 0 ? '|$' : '';\r\n\r\n        state.output = state.output.slice(0, -(prior.output + prev.output).length);\r\n        prior.output = `(?:${prior.output}`;\r\n\r\n        prev.type = 'globstar';\r\n        prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;\r\n        prev.value += value;\r\n\r\n        state.output += prior.output + prev.output;\r\n        state.globstar = true;\r\n\r\n        consume(value + advance());\r\n\r\n        push({ type: 'slash', value: '/', output: '' });\r\n        continue;\r\n      }\r\n\r\n      if (prior.type === 'bos' && rest[0] === '/') {\r\n        prev.type = 'globstar';\r\n        prev.value += value;\r\n        prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;\r\n        state.output = prev.output;\r\n        state.globstar = true;\r\n        consume(value + advance());\r\n        push({ type: 'slash', value: '/', output: '' });\r\n        continue;\r\n      }\r\n\r\n      // remove single star from output\r\n      state.output = state.output.slice(0, -prev.output.length);\r\n\r\n      // reset previous token to globstar\r\n      prev.type = 'globstar';\r\n      prev.output = globstar(opts);\r\n      prev.value += value;\r\n\r\n      // reset output with globstar\r\n      state.output += prev.output;\r\n      state.globstar = true;\r\n      consume(value);\r\n      continue;\r\n    }\r\n\r\n    const token = { type: 'star', value, output: star };\r\n\r\n    if (opts.bash === true) {\r\n      token.output = '.*?';\r\n      if (prev.type === 'bos' || prev.type === 'slash') {\r\n        token.output = nodot + token.output;\r\n      }\r\n      push(token);\r\n      continue;\r\n    }\r\n\r\n    if (prev && (prev.type === 'bracket' || prev.type === 'paren') && opts.regex === true) {\r\n      token.output = value;\r\n      push(token);\r\n      continue;\r\n    }\r\n\r\n    if (state.index === state.start || prev.type === 'slash' || prev.type === 'dot') {\r\n      if (prev.type === 'dot') {\r\n        state.output += NO_DOT_SLASH;\r\n        prev.output += NO_DOT_SLASH;\r\n\r\n      } else if (opts.dot === true) {\r\n        state.output += NO_DOTS_SLASH;\r\n        prev.output += NO_DOTS_SLASH;\r\n\r\n      } else {\r\n        state.output += nodot;\r\n        prev.output += nodot;\r\n      }\r\n\r\n      if (peek() !== '*') {\r\n        state.output += ONE_CHAR;\r\n        prev.output += ONE_CHAR;\r\n      }\r\n    }\r\n\r\n    push(token);\r\n  }\r\n\r\n  while (state.brackets > 0) {\r\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ']'));\r\n    state.output = utils.escapeLast(state.output, '[');\r\n    decrement('brackets');\r\n  }\r\n\r\n  while (state.parens > 0) {\r\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ')'));\r\n    state.output = utils.escapeLast(state.output, '(');\r\n    decrement('parens');\r\n  }\r\n\r\n  while (state.braces > 0) {\r\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', '}'));\r\n    state.output = utils.escapeLast(state.output, '{');\r\n    decrement('braces');\r\n  }\r\n\r\n  if (opts.strictSlashes !== true && (prev.type === 'star' || prev.type === 'bracket')) {\r\n    push({ type: 'maybe_slash', value: '', output: `${SLASH_LITERAL}?` });\r\n  }\r\n\r\n  // rebuild the output if we had to backtrack at any point\r\n  if (state.backtrack === true) {\r\n    state.output = '';\r\n\r\n    for (const token of state.tokens) {\r\n      state.output += token.output != null ? token.output : token.value;\r\n\r\n      if (token.suffix) {\r\n        state.output += token.suffix;\r\n      }\r\n    }\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\n/**\r\n * Fast paths for creating regular expressions for common glob patterns.\r\n * This can significantly speed up processing and has very little downside\r\n * impact when none of the fast paths match.\r\n */\r\n\r\nparse.fastpaths = (input, options) => {\r\n  const opts = { ...options };\r\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\r\n  const len = input.length;\r\n  if (len > max) {\r\n    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);\r\n  }\r\n\r\n  input = REPLACEMENTS[input] || input;\r\n  const win32 = utils.isWindows(options);\r\n\r\n  // create constants based on platform, for windows or posix\r\n  const {\r\n    DOT_LITERAL,\r\n    SLASH_LITERAL,\r\n    ONE_CHAR,\r\n    DOTS_SLASH,\r\n    NO_DOT,\r\n    NO_DOTS,\r\n    NO_DOTS_SLASH,\r\n    STAR,\r\n    START_ANCHOR\r\n  } = constants.globChars(win32);\r\n\r\n  const nodot = opts.dot ? NO_DOTS : NO_DOT;\r\n  const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;\r\n  const capture = opts.capture ? '' : '?:';\r\n  const state = { negated: false, prefix: '' };\r\n  let star = opts.bash === true ? '.*?' : STAR;\r\n\r\n  if (opts.capture) {\r\n    star = `(${star})`;\r\n  }\r\n\r\n  const globstar = opts => {\r\n    if (opts.noglobstar === true) return star;\r\n    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;\r\n  };\r\n\r\n  const create = str => {\r\n    switch (str) {\r\n      case '*':\r\n        return `${nodot}${ONE_CHAR}${star}`;\r\n\r\n      case '.*':\r\n        return `${DOT_LITERAL}${ONE_CHAR}${star}`;\r\n\r\n      case '*.*':\r\n        return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;\r\n\r\n      case '*/*':\r\n        return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;\r\n\r\n      case '**':\r\n        return nodot + globstar(opts);\r\n\r\n      case '**/*':\r\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;\r\n\r\n      case '**/*.*':\r\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;\r\n\r\n      case '**/.*':\r\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;\r\n\r\n      default: {\r\n        const match = /^(.*?)\\.(\\w+)$/.exec(str);\r\n        if (!match) return;\r\n\r\n        const source = create(match[1]);\r\n        if (!source) return;\r\n\r\n        return source + DOT_LITERAL + match[2];\r\n      }\r\n    }\r\n  };\r\n\r\n  const output = utils.removePrefix(input, state);\r\n  let source = create(output);\r\n\r\n  if (source && opts.strictSlashes !== true) {\r\n    source += `${SLASH_LITERAL}?`;\r\n  }\r\n\r\n  return source;\r\n};\r\n\r\nmodule.exports = parse;\r\n", "'use strict';\r\n\r\nconst path = require('path');\r\nconst scan = require('./scan');\r\nconst parse = require('./parse');\r\nconst utils = require('./utils');\r\nconst constants = require('./constants');\r\nconst isObject = val => val && typeof val === 'object' && !Array.isArray(val);\r\n\r\n/**\r\n * Creates a matcher function from one or more glob patterns. The\r\n * returned function takes a string to match as its first argument,\r\n * and returns true if the string is a match. The returned matcher\r\n * function also takes a boolean as the second argument that, when true,\r\n * returns an object with additional information.\r\n *\r\n * ```js\r\n * const picomatch = require('picomatch');\r\n * // picomatch(glob[, options]);\r\n *\r\n * const isMatch = picomatch('*.!(*a)');\r\n * console.log(isMatch('a.a')); //=> false\r\n * console.log(isMatch('a.b')); //=> true\r\n * ```\r\n * @name picomatch\r\n * @param {String|Array} `globs` One or more glob patterns.\r\n * @param {Object=} `options`\r\n * @return {Function=} Returns a matcher function.\r\n * @api public\r\n */\r\n\r\nconst picomatch = (glob, options, returnState = false) => {\r\n  if (Array.isArray(glob)) {\r\n    const fns = glob.map(input => picomatch(input, options, returnState));\r\n    const arrayMatcher = str => {\r\n      for (const isMatch of fns) {\r\n        const state = isMatch(str);\r\n        if (state) return state;\r\n      }\r\n      return false;\r\n    };\r\n    return arrayMatcher;\r\n  }\r\n\r\n  const isState = isObject(glob) && glob.tokens && glob.input;\r\n\r\n  if (glob === '' || (typeof glob !== 'string' && !isState)) {\r\n    throw new TypeError('Expected pattern to be a non-empty string');\r\n  }\r\n\r\n  const opts = options || {};\r\n  const posix = utils.isWindows(options);\r\n  const regex = isState\r\n    ? picomatch.compileRe(glob, options)\r\n    : picomatch.makeRe(glob, options, false, true);\r\n\r\n  const state = regex.state;\r\n  delete regex.state;\r\n\r\n  let isIgnored = () => false;\r\n  if (opts.ignore) {\r\n    const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };\r\n    isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);\r\n  }\r\n\r\n  const matcher = (input, returnObject = false) => {\r\n    const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });\r\n    const result = { glob, state, regex, posix, input, output, match, isMatch };\r\n\r\n    if (typeof opts.onResult === 'function') {\r\n      opts.onResult(result);\r\n    }\r\n\r\n    if (isMatch === false) {\r\n      result.isMatch = false;\r\n      return returnObject ? result : false;\r\n    }\r\n\r\n    if (isIgnored(input)) {\r\n      if (typeof opts.onIgnore === 'function') {\r\n        opts.onIgnore(result);\r\n      }\r\n      result.isMatch = false;\r\n      return returnObject ? result : false;\r\n    }\r\n\r\n    if (typeof opts.onMatch === 'function') {\r\n      opts.onMatch(result);\r\n    }\r\n    return returnObject ? result : true;\r\n  };\r\n\r\n  if (returnState) {\r\n    matcher.state = state;\r\n  }\r\n\r\n  return matcher;\r\n};\r\n\r\n/**\r\n * Test `input` with the given `regex`. This is used by the main\r\n * `picomatch()` function to test the input string.\r\n *\r\n * ```js\r\n * const picomatch = require('picomatch');\r\n * // picomatch.test(input, regex[, options]);\r\n *\r\n * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\\/([^/]*?))$/));\r\n * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }\r\n * ```\r\n * @param {String} `input` String to test.\r\n * @param {RegExp} `regex`\r\n * @return {Object} Returns an object with matching info.\r\n * @api public\r\n */\r\n\r\npicomatch.test = (input, regex, options, { glob, posix } = {}) => {\r\n  if (typeof input !== 'string') {\r\n    throw new TypeError('Expected input to be a string');\r\n  }\r\n\r\n  if (input === '') {\r\n    return { isMatch: false, output: '' };\r\n  }\r\n\r\n  const opts = options || {};\r\n  const format = opts.format || (posix ? utils.toPosixSlashes : null);\r\n  let match = input === glob;\r\n  let output = (match && format) ? format(input) : input;\r\n\r\n  if (match === false) {\r\n    output = format ? format(input) : input;\r\n    match = output === glob;\r\n  }\r\n\r\n  if (match === false || opts.capture === true) {\r\n    if (opts.matchBase === true || opts.basename === true) {\r\n      match = picomatch.matchBase(input, regex, options, posix);\r\n    } else {\r\n      match = regex.exec(output);\r\n    }\r\n  }\r\n\r\n  return { isMatch: Boolean(match), match, output };\r\n};\r\n\r\n/**\r\n * Match the basename of a filepath.\r\n *\r\n * ```js\r\n * const picomatch = require('picomatch');\r\n * // picomatch.matchBase(input, glob[, options]);\r\n * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true\r\n * ```\r\n * @param {String} `input` String to test.\r\n * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\npicomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {\r\n  const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);\r\n  return regex.test(path.basename(input));\r\n};\r\n\r\n/**\r\n * Returns true if **any** of the given glob `patterns` match the specified `string`.\r\n *\r\n * ```js\r\n * const picomatch = require('picomatch');\r\n * // picomatch.isMatch(string, patterns[, options]);\r\n *\r\n * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true\r\n * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false\r\n * ```\r\n * @param {String|Array} str The string to test.\r\n * @param {String|Array} patterns One or more glob patterns to use for matching.\r\n * @param {Object} [options] See available [options](#options).\r\n * @return {Boolean} Returns true if any patterns match `str`\r\n * @api public\r\n */\r\n\r\npicomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);\r\n\r\n/**\r\n * Parse a glob pattern to create the source string for a regular\r\n * expression.\r\n *\r\n * ```js\r\n * const picomatch = require('picomatch');\r\n * const result = picomatch.parse(pattern[, options]);\r\n * ```\r\n * @param {String} `pattern`\r\n * @param {Object} `options`\r\n * @return {Object} Returns an object with useful properties and output to be used as a regex source string.\r\n * @api public\r\n */\r\n\r\npicomatch.parse = (pattern, options) => {\r\n  if (Array.isArray(pattern)) return pattern.map(p => picomatch.parse(p, options));\r\n  return parse(pattern, { ...options, fastpaths: false });\r\n};\r\n\r\n/**\r\n * Scan a glob pattern to separate the pattern into segments.\r\n *\r\n * ```js\r\n * const picomatch = require('picomatch');\r\n * // picomatch.scan(input[, options]);\r\n *\r\n * const result = picomatch.scan('!./foo/*.js');\r\n * console.log(result);\r\n * { prefix: '!./',\r\n *   input: '!./foo/*.js',\r\n *   start: 3,\r\n *   base: 'foo',\r\n *   glob: '*.js',\r\n *   isBrace: false,\r\n *   isBracket: false,\r\n *   isGlob: true,\r\n *   isExtglob: false,\r\n *   isGlobstar: false,\r\n *   negated: true }\r\n * ```\r\n * @param {String} `input` Glob pattern to scan.\r\n * @param {Object} `options`\r\n * @return {Object} Returns an object with\r\n * @api public\r\n */\r\n\r\npicomatch.scan = (input, options) => scan(input, options);\r\n\r\n/**\r\n * Compile a regular expression from the `state` object returned by the\r\n * [parse()](#parse) method.\r\n *\r\n * @param {Object} `state`\r\n * @param {Object} `options`\r\n * @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.\r\n * @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.\r\n * @return {RegExp}\r\n * @api public\r\n */\r\n\r\npicomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {\r\n  if (returnOutput === true) {\r\n    return state.output;\r\n  }\r\n\r\n  const opts = options || {};\r\n  const prepend = opts.contains ? '' : '^';\r\n  const append = opts.contains ? '' : '$';\r\n\r\n  let source = `${prepend}(?:${state.output})${append}`;\r\n  if (state && state.negated === true) {\r\n    source = `^(?!${source}).*$`;\r\n  }\r\n\r\n  const regex = picomatch.toRegex(source, options);\r\n  if (returnState === true) {\r\n    regex.state = state;\r\n  }\r\n\r\n  return regex;\r\n};\r\n\r\n/**\r\n * Create a regular expression from a parsed glob pattern.\r\n *\r\n * ```js\r\n * const picomatch = require('picomatch');\r\n * const state = picomatch.parse('*.js');\r\n * // picomatch.compileRe(state[, options]);\r\n *\r\n * console.log(picomatch.compileRe(state));\r\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\r\n * ```\r\n * @param {String} `state` The object returned from the `.parse` method.\r\n * @param {Object} `options`\r\n * @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.\r\n * @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.\r\n * @return {RegExp} Returns a regex created from the given pattern.\r\n * @api public\r\n */\r\n\r\npicomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {\r\n  if (!input || typeof input !== 'string') {\r\n    throw new TypeError('Expected a non-empty string');\r\n  }\r\n\r\n  let parsed = { negated: false, fastpaths: true };\r\n\r\n  if (options.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {\r\n    parsed.output = parse.fastpaths(input, options);\r\n  }\r\n\r\n  if (!parsed.output) {\r\n    parsed = parse(input, options);\r\n  }\r\n\r\n  return picomatch.compileRe(parsed, options, returnOutput, returnState);\r\n};\r\n\r\n/**\r\n * Create a regular expression from the given regex source string.\r\n *\r\n * ```js\r\n * const picomatch = require('picomatch');\r\n * // picomatch.toRegex(source[, options]);\r\n *\r\n * const { output } = picomatch.parse('*.js');\r\n * console.log(picomatch.toRegex(output));\r\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\r\n * ```\r\n * @param {String} `source` Regular expression source string.\r\n * @param {Object} `options`\r\n * @return {RegExp}\r\n * @api public\r\n */\r\n\r\npicomatch.toRegex = (source, options) => {\r\n  try {\r\n    const opts = options || {};\r\n    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));\r\n  } catch (err) {\r\n    if (options && options.debug === true) throw err;\r\n    return /$^/;\r\n  }\r\n};\r\n\r\n/**\r\n * Picomatch constants.\r\n * @return {Object}\r\n */\r\n\r\npicomatch.constants = constants;\r\n\r\n/**\r\n * Expose \"picomatch\"\r\n */\r\n\r\nmodule.exports = picomatch;\r\n", "'use strict';\r\n\r\nmodule.exports = require('./lib/picomatch');\r\n", "'use strict';\r\n\r\nconst fs = require('fs');\r\nconst { Readable } = require('stream');\r\nconst sysPath = require('path');\r\nconst { promisify } = require('util');\r\nconst picomatch = require('picomatch');\r\n\r\nconst readdir = promisify(fs.readdir);\r\nconst stat = promisify(fs.stat);\r\nconst lstat = promisify(fs.lstat);\r\nconst realpath = promisify(fs.realpath);\r\n\r\n/**\r\n * @typedef {Object} EntryInfo\r\n * @property {String} path\r\n * @property {String} fullPath\r\n * @property {fs.Stats=} stats\r\n * @property {fs.Dirent=} dirent\r\n * @property {String} basename\r\n */\r\n\r\nconst BANG = '!';\r\nconst RECURSIVE_ERROR_CODE = 'READDIRP_RECURSIVE_ERROR';\r\nconst NORMAL_FLOW_ERRORS = new Set(['ENOENT', 'EPERM', 'EACCES', 'ELOOP', RECURSIVE_ERROR_CODE]);\r\nconst FILE_TYPE = 'files';\r\nconst DIR_TYPE = 'directories';\r\nconst FILE_DIR_TYPE = 'files_directories';\r\nconst EVERYTHING_TYPE = 'all';\r\nconst ALL_TYPES = [FILE_TYPE, DIR_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE];\r\n\r\nconst isNormalFlowError = error => NORMAL_FLOW_ERRORS.has(error.code);\r\nconst [maj, min] = process.versions.node.split('.').slice(0, 2).map(n => Number.parseInt(n, 10));\r\nconst wantBigintFsStats = process.platform === 'win32' && (maj > 10 || (maj === 10 && min >= 5));\r\n\r\nconst normalizeFilter = filter => {\r\n  if (filter === undefined) return;\r\n  if (typeof filter === 'function') return filter;\r\n\r\n  if (typeof filter === 'string') {\r\n    const glob = picomatch(filter.trim());\r\n    return entry => glob(entry.basename);\r\n  }\r\n\r\n  if (Array.isArray(filter)) {\r\n    const positive = [];\r\n    const negative = [];\r\n    for (const item of filter) {\r\n      const trimmed = item.trim();\r\n      if (trimmed.charAt(0) === BANG) {\r\n        negative.push(picomatch(trimmed.slice(1)));\r\n      } else {\r\n        positive.push(picomatch(trimmed));\r\n      }\r\n    }\r\n\r\n    if (negative.length > 0) {\r\n      if (positive.length > 0) {\r\n        return entry =>\r\n          positive.some(f => f(entry.basename)) && !negative.some(f => f(entry.basename));\r\n      }\r\n      return entry => !negative.some(f => f(entry.basename));\r\n    }\r\n    return entry => positive.some(f => f(entry.basename));\r\n  }\r\n};\r\n\r\nclass ReaddirpStream extends Readable {\r\n  static get defaultOptions() {\r\n    return {\r\n      root: '.',\r\n      /* eslint-disable no-unused-vars */\r\n      fileFilter: (path) => true,\r\n      directoryFilter: (path) => true,\r\n      /* eslint-enable no-unused-vars */\r\n      type: FILE_TYPE,\r\n      lstat: false,\r\n      depth: 2147483648,\r\n      alwaysStat: false\r\n    };\r\n  }\r\n\r\n  constructor(options = {}) {\r\n    super({\r\n      objectMode: true,\r\n      autoDestroy: true,\r\n      highWaterMark: options.highWaterMark || 4096\r\n    });\r\n    const opts = { ...ReaddirpStream.defaultOptions, ...options };\r\n    const { root, type } = opts;\r\n\r\n    this._fileFilter = normalizeFilter(opts.fileFilter);\r\n    this._directoryFilter = normalizeFilter(opts.directoryFilter);\r\n\r\n    const statMethod = opts.lstat ? lstat : stat;\r\n    // Use bigint stats if it's windows and stat() supports options (node 10+).\r\n    if (wantBigintFsStats) {\r\n      this._stat = path => statMethod(path, { bigint: true });\r\n    } else {\r\n      this._stat = statMethod;\r\n    }\r\n\r\n    this._maxDepth = opts.depth;\r\n    this._wantsDir = [DIR_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE].includes(type);\r\n    this._wantsFile = [FILE_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE].includes(type);\r\n    this._wantsEverything = type === EVERYTHING_TYPE;\r\n    this._root = sysPath.resolve(root);\r\n    this._isDirent = ('Dirent' in fs) && !opts.alwaysStat;\r\n    this._statsProp = this._isDirent ? 'dirent' : 'stats';\r\n    this._rdOptions = { encoding: 'utf8', withFileTypes: this._isDirent };\r\n\r\n    // Launch stream with one parent, the root dir.\r\n    this.parents = [this._exploreDir(root, 1)];\r\n    this.reading = false;\r\n    this.parent = undefined;\r\n  }\r\n\r\n  async _read(batch) {\r\n    if (this.reading) return;\r\n    this.reading = true;\r\n\r\n    try {\r\n      while (!this.destroyed && batch > 0) {\r\n        const { path, depth, files = [] } = this.parent || {};\r\n\r\n        if (files.length > 0) {\r\n          const slice = files.splice(0, batch).map(dirent => this._formatEntry(dirent, path));\r\n          for (const entry of await Promise.all(slice)) {\r\n            if (this.destroyed) return;\r\n\r\n            const entryType = await this._getEntryType(entry);\r\n            if (entryType === 'directory' && this._directoryFilter(entry)) {\r\n              if (depth <= this._maxDepth) {\r\n                this.parents.push(this._exploreDir(entry.fullPath, depth + 1));\r\n              }\r\n\r\n              if (this._wantsDir) {\r\n                this.push(entry);\r\n                batch--;\r\n              }\r\n            } else if ((entryType === 'file' || this._includeAsFile(entry)) && this._fileFilter(entry)) {\r\n              if (this._wantsFile) {\r\n                this.push(entry);\r\n                batch--;\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          const parent = this.parents.pop();\r\n          if (!parent) {\r\n            this.push(null);\r\n            break;\r\n          }\r\n          this.parent = await parent;\r\n          if (this.destroyed) return;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      this.destroy(error);\r\n    } finally {\r\n      this.reading = false;\r\n    }\r\n  }\r\n\r\n  async _exploreDir(path, depth) {\r\n    let files;\r\n    try {\r\n      files = await readdir(path, this._rdOptions);\r\n    } catch (error) {\r\n      this._onError(error);\r\n    }\r\n    return { files, depth, path };\r\n  }\r\n\r\n  async _formatEntry(dirent, path) {\r\n    let entry;\r\n    try {\r\n      const basename = this._isDirent ? dirent.name : dirent;\r\n      const fullPath = sysPath.resolve(sysPath.join(path, basename));\r\n      entry = { path: sysPath.relative(this._root, fullPath), fullPath, basename };\r\n      entry[this._statsProp] = this._isDirent ? dirent : await this._stat(fullPath);\r\n    } catch (err) {\r\n      this._onError(err);\r\n    }\r\n    return entry;\r\n  }\r\n\r\n  _onError(err) {\r\n    if (isNormalFlowError(err) && !this.destroyed) {\r\n      this.emit('warn', err);\r\n    } else {\r\n      this.destroy(err);\r\n    }\r\n  }\r\n\r\n  async _getEntryType(entry) {\r\n    // entry may be undefined, because a warning or an error were emitted\r\n    // and the statsProp is undefined\r\n    const stats = entry && entry[this._statsProp];\r\n    if (!stats) {\r\n      return;\r\n    }\r\n    if (stats.isFile()) {\r\n      return 'file';\r\n    }\r\n    if (stats.isDirectory()) {\r\n      return 'directory';\r\n    }\r\n    if (stats && stats.isSymbolicLink()) {\r\n      const full = entry.fullPath;\r\n      try {\r\n        const entryRealPath = await realpath(full);\r\n        const entryRealPathStats = await lstat(entryRealPath);\r\n        if (entryRealPathStats.isFile()) {\r\n          return 'file';\r\n        }\r\n        if (entryRealPathStats.isDirectory()) {\r\n          const len = entryRealPath.length;\r\n          if (full.startsWith(entryRealPath) && full.substr(len, 1) === sysPath.sep) {\r\n            const recursiveError = new Error(\r\n              `Circular symlink detected: \"${full}\" points to \"${entryRealPath}\"`\r\n            );\r\n            recursiveError.code = RECURSIVE_ERROR_CODE;\r\n            return this._onError(recursiveError);\r\n          }\r\n          return 'directory';\r\n        }\r\n      } catch (error) {\r\n        this._onError(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  _includeAsFile(entry) {\r\n    const stats = entry && entry[this._statsProp];\r\n\r\n    return stats && this._wantsEverything && !stats.isDirectory();\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Object} ReaddirpArguments\r\n * @property {Function=} fileFilter\r\n * @property {Function=} directoryFilter\r\n * @property {String=} type\r\n * @property {Number=} depth\r\n * @property {String=} root\r\n * @property {Boolean=} lstat\r\n * @property {Boolean=} bigint\r\n */\r\n\r\n/**\r\n * Main function which ends up calling readdirRec and reads all files and directories in given root recursively.\r\n * @param {String} root Root directory\r\n * @param {ReaddirpArguments=} options Options to specify root (start directory), filters and recursion depth\r\n */\r\nconst readdirp = (root, options = {}) => {\r\n  let type = options.entryType || options.type;\r\n  if (type === 'both') type = FILE_DIR_TYPE; // backwards-compatibility\r\n  if (type) options.type = type;\r\n  if (!root) {\r\n    throw new Error('readdirp: root argument is required. Usage: readdirp(root, options)');\r\n  } else if (typeof root !== 'string') {\r\n    throw new TypeError('readdirp: root argument must be a string. Usage: readdirp(root, options)');\r\n  } else if (type && !ALL_TYPES.includes(type)) {\r\n    throw new Error(`readdirp: Invalid type passed. Use one of ${ALL_TYPES.join(', ')}`);\r\n  }\r\n\r\n  options.root = root;\r\n  return new ReaddirpStream(options);\r\n};\r\n\r\nconst readdirpPromise = (root, options = {}) => {\r\n  return new Promise((resolve, reject) => {\r\n    const files = [];\r\n    readdirp(root, options)\r\n      .on('data', entry => files.push(entry))\r\n      .on('end', () => resolve(files))\r\n      .on('error', error => reject(error));\r\n  });\r\n};\r\n\r\nreaddirp.promise = readdirpPromise;\r\nreaddirp.ReaddirpStream = ReaddirpStream;\r\nreaddirp.default = readdirp;\r\n\r\nmodule.exports = readdirp;\r\n"],
  "mappings": "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",
  "names": ["opts", "value", "rest", "source", "state", "require_picomatch"]
}
